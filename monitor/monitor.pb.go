// Code generated by protoc-gen-go.
// source: monitor.proto
// DO NOT EDIT!

/*
Package monitor is a generated protocol buffer package.

It is generated from these files:
	monitor.proto

It has these top-level messages:
	Metric
	GatherInterfaceStats
	GatherFsStats
	Response
	MetricList
*/
package monitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Metric struct {
	Name                 string                           `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	IP                   string                           `protobuf:"bytes,2,opt,name=IP,json=iP" json:"IP,omitempty"`
	Timestamp            int64                            `protobuf:"varint,3,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	CpuPercent           int32                            `protobuf:"varint,4,opt,name=CpuPercent,json=cpuPercent" json:"CpuPercent,omitempty"`
	LoadAverage          int32                            `protobuf:"varint,5,opt,name=LoadAverage,json=loadAverage" json:"LoadAverage,omitempty"`
	MemPercent           int32                            `protobuf:"varint,6,opt,name=MemPercent,json=memPercent" json:"MemPercent,omitempty"`
	SwapPercent          int32                            `protobuf:"varint,7,opt,name=SwapPercent,json=swapPercent" json:"SwapPercent,omitempty"`
	TcpEstablished       int32                            `protobuf:"varint,8,opt,name=TcpEstablished,json=tcpEstablished" json:"TcpEstablished,omitempty"`
	IpReceivedPerSec     int32                            `protobuf:"varint,9,opt,name=IpReceivedPerSec,json=ipReceivedPerSec" json:"IpReceivedPerSec,omitempty"`
	IpDiscardedPerSec    int32                            `protobuf:"varint,10,opt,name=IpDiscardedPerSec,json=ipDiscardedPerSec" json:"IpDiscardedPerSec,omitempty"`
	TcpReceivedPerSec    int32                            `protobuf:"varint,11,opt,name=TcpReceivedPerSec,json=tcpReceivedPerSec" json:"TcpReceivedPerSec,omitempty"`
	TcpSendoutPerSec     int32                            `protobuf:"varint,12,opt,name=TcpSendoutPerSec,json=tcpSendoutPerSec" json:"TcpSendoutPerSec,omitempty"`
	TcpActiveOpenPerSec  int32                            `protobuf:"varint,13,opt,name=TcpActiveOpenPerSec,json=tcpActiveOpenPerSec" json:"TcpActiveOpenPerSec,omitempty"`
	TcpBadSegmentsPerSec int32                            `protobuf:"varint,14,opt,name=TcpBadSegmentsPerSec,json=tcpBadSegmentsPerSec" json:"TcpBadSegmentsPerSec,omitempty"`
	Network              map[string]*GatherInterfaceStats `protobuf:"bytes,15,rep,name=Network,json=network" json:"Network,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FileSystem           map[string]*GatherFsStats        `protobuf:"bytes,16,rep,name=FileSystem,json=fileSystem" json:"FileSystem,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Metric) GetNetwork() map[string]*GatherInterfaceStats {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Metric) GetFileSystem() map[string]*GatherFsStats {
	if m != nil {
		return m.FileSystem
	}
	return nil
}

type GatherInterfaceStats struct {
	RxKBPerSec     int32 `protobuf:"varint,1,opt,name=RxKBPerSec,json=rxKBPerSec" json:"RxKBPerSec,omitempty"`
	RxPackets      int32 `protobuf:"varint,2,opt,name=RxPackets,json=rxPackets" json:"RxPackets,omitempty"`
	RxErrorsPerSec int32 `protobuf:"varint,3,opt,name=RxErrorsPerSec,json=rxErrorsPerSec" json:"RxErrorsPerSec,omitempty"`
	TxKBPerSec     int32 `protobuf:"varint,4,opt,name=TxKBPerSec,json=txKBPerSec" json:"TxKBPerSec,omitempty"`
	TxPackets      int32 `protobuf:"varint,5,opt,name=TxPackets,json=txPackets" json:"TxPackets,omitempty"`
	TxErrorsPerSec int32 `protobuf:"varint,6,opt,name=TxErrorsPerSec,json=txErrorsPerSec" json:"TxErrorsPerSec,omitempty"`
}

func (m *GatherInterfaceStats) Reset()                    { *m = GatherInterfaceStats{} }
func (m *GatherInterfaceStats) String() string            { return proto.CompactTextString(m) }
func (*GatherInterfaceStats) ProtoMessage()               {}
func (*GatherInterfaceStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GatherFsStats struct {
	UsagePercent     int32 `protobuf:"varint,1,opt,name=UsagePercent,json=usagePercent" json:"UsagePercent,omitempty"`
	ReadCount        int32 `protobuf:"varint,2,opt,name=ReadCount,json=readCount" json:"ReadCount,omitempty"`
	WriteCount       int32 `protobuf:"varint,3,opt,name=WriteCount,json=writeCount" json:"WriteCount,omitempty"`
	ReadBytesPerSec  int32 `protobuf:"varint,4,opt,name=ReadBytesPerSec,json=readBytesPerSec" json:"ReadBytesPerSec,omitempty"`
	WriteBytesPerSec int32 `protobuf:"varint,5,opt,name=WriteBytesPerSec,json=writeBytesPerSec" json:"WriteBytesPerSec,omitempty"`
	IoInProgress     int32 `protobuf:"varint,6,opt,name=IoInProgress,json=ioInProgress" json:"IoInProgress,omitempty"`
}

func (m *GatherFsStats) Reset()                    { *m = GatherFsStats{} }
func (m *GatherFsStats) String() string            { return proto.CompactTextString(m) }
func (*GatherFsStats) ProtoMessage()               {}
func (*GatherFsStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Response struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MetricList struct {
	Items []*Metric `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *MetricList) Reset()                    { *m = MetricList{} }
func (m *MetricList) String() string            { return proto.CompactTextString(m) }
func (*MetricList) ProtoMessage()               {}
func (*MetricList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MetricList) GetItems() []*Metric {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Metric)(nil), "monitor.Metric")
	proto.RegisterType((*GatherInterfaceStats)(nil), "monitor.GatherInterfaceStats")
	proto.RegisterType((*GatherFsStats)(nil), "monitor.GatherFsStats")
	proto.RegisterType((*Response)(nil), "monitor.Response")
	proto.RegisterType((*MetricList)(nil), "monitor.MetricList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MonitorService service

type MonitorServiceClient interface {
	// 发生单条
	Send(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Response, error)
	// 发生多条
	BatchSend(ctx context.Context, in *MetricList, opts ...grpc.CallOption) (*Response, error)
}

type monitorServiceClient struct {
	cc *grpc.ClientConn
}

func NewMonitorServiceClient(cc *grpc.ClientConn) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) Send(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/monitor.MonitorService/send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) BatchSend(ctx context.Context, in *MetricList, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/monitor.MonitorService/batchSend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MonitorService service

type MonitorServiceServer interface {
	// 发生单条
	Send(context.Context, *Metric) (*Response, error)
	// 发生多条
	BatchSend(context.Context, *MetricList) (*Response, error)
}

func RegisterMonitorServiceServer(s *grpc.Server, srv MonitorServiceServer) {
	s.RegisterService(&_MonitorService_serviceDesc, srv)
}

func _MonitorService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.MonitorService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).Send(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorService_BatchSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).BatchSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.MonitorService/BatchSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).BatchSend(ctx, req.(*MetricList))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send",
			Handler:    _MonitorService_Send_Handler,
		},
		{
			MethodName: "batchSend",
			Handler:    _MonitorService_BatchSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("monitor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x55, 0x6d, 0x6f, 0xda, 0x48,
	0x10, 0x3e, 0xde, 0xc3, 0x40, 0x80, 0x6c, 0xa2, 0x93, 0x85, 0x72, 0x77, 0x11, 0xd2, 0xdd, 0x45,
	0xa7, 0x08, 0x45, 0x44, 0x77, 0x3a, 0xf5, 0x4b, 0x15, 0xd2, 0xa4, 0x42, 0x4d, 0x52, 0x64, 0x88,
	0xaa, 0x7e, 0x74, 0xec, 0x09, 0x71, 0x83, 0xbd, 0xd6, 0xee, 0x02, 0xe1, 0xb7, 0xf5, 0xdf, 0xf4,
	0x6b, 0xff, 0x44, 0xf7, 0xc5, 0x36, 0xd8, 0xe5, 0xdb, 0xf2, 0xcc, 0xf3, 0x3c, 0x33, 0xb3, 0x9e,
	0x59, 0x60, 0x3f, 0xa0, 0xa1, 0x2f, 0x28, 0xeb, 0x47, 0x8c, 0x0a, 0x4a, 0x6a, 0xf1, 0xcf, 0xde,
	0xd7, 0x2a, 0x54, 0xef, 0x50, 0x30, 0xdf, 0x25, 0x04, 0xca, 0xf7, 0x4e, 0x80, 0x56, 0xe1, 0xa4,
	0x70, 0x5a, 0xb7, 0xcb, 0xa1, 0x3c, 0x93, 0x16, 0x14, 0x47, 0x63, 0xab, 0xa8, 0x91, 0xa2, 0x3f,
	0x26, 0xc7, 0x50, 0x9f, 0xfa, 0x01, 0x72, 0xe1, 0x04, 0x91, 0x55, 0x92, 0x70, 0xc9, 0xae, 0x8b,
	0x04, 0x20, 0xbf, 0x03, 0x5c, 0x45, 0x8b, 0x31, 0x32, 0x17, 0x43, 0x61, 0x95, 0x65, 0xb8, 0x62,
	0x83, 0x9b, 0x22, 0xe4, 0x04, 0x1a, 0xb7, 0xd4, 0xf1, 0x2e, 0x97, 0xc8, 0x9c, 0x19, 0x5a, 0x15,
	0x4d, 0x68, 0xcc, 0x37, 0x90, 0x72, 0xb8, 0xc3, 0x20, 0x71, 0xa8, 0x1a, 0x87, 0x20, 0x45, 0x94,
	0xc3, 0x64, 0xe5, 0x44, 0x09, 0xa1, 0x66, 0x1c, 0xf8, 0x06, 0x22, 0x7f, 0x41, 0x6b, 0xea, 0x46,
	0xd7, 0xb2, 0xa0, 0xc7, 0xb9, 0xcf, 0x9f, 0xd1, 0xb3, 0xf6, 0x34, 0xa9, 0x25, 0x32, 0x28, 0xf9,
	0x07, 0x3a, 0xa3, 0xc8, 0x46, 0x17, 0xfd, 0x25, 0x7a, 0x52, 0x3c, 0x41, 0xd7, 0xaa, 0x6b, 0x66,
	0xc7, 0xcf, 0xe1, 0xe4, 0x0c, 0x0e, 0x46, 0xd1, 0x3b, 0x9f, 0xbb, 0x0e, 0xf3, 0x52, 0x32, 0x68,
	0xf2, 0x81, 0x9f, 0x0f, 0x28, 0xb6, 0xac, 0x20, 0x67, 0xdd, 0x30, 0x6c, 0x91, 0x0f, 0xa8, 0x3a,
	0x24, 0x7b, 0x82, 0xa1, 0x47, 0x17, 0x22, 0x26, 0x37, 0x4d, 0x1d, 0x22, 0x87, 0x93, 0x73, 0x38,
	0x94, 0xdc, 0x4b, 0x57, 0x48, 0xfd, 0xc7, 0x08, 0xc3, 0x98, 0xbe, 0xaf, 0xe9, 0x87, 0xe2, 0xe7,
	0x10, 0x19, 0xc0, 0x91, 0x54, 0x0c, 0x1d, 0x6f, 0x82, 0xb3, 0x40, 0x5e, 0x0f, 0x8f, 0x25, 0x2d,
	0x2d, 0x39, 0x12, 0x3b, 0x62, 0xe4, 0x3f, 0xa8, 0xdd, 0xa3, 0x58, 0x51, 0xf6, 0x62, 0xb5, 0x4f,
	0x4a, 0xa7, 0x8d, 0xc1, 0x71, 0x3f, 0x19, 0x1e, 0x33, 0x29, 0xfd, 0x38, 0x7c, 0x1d, 0x0a, 0xb6,
	0xb6, 0x6b, 0xa1, 0xf9, 0x45, 0xde, 0x02, 0xdc, 0xf8, 0x73, 0x9c, 0xac, 0xb9, 0xc0, 0xc0, 0xea,
	0x68, 0xe9, 0x1f, 0x79, 0xe9, 0x86, 0x61, 0xd4, 0xf0, 0x94, 0x02, 0xdd, 0xcf, 0xd0, 0xdc, 0x76,
	0x26, 0x1d, 0x28, 0xbd, 0xe0, 0x3a, 0x9e, 0x47, 0x75, 0x24, 0x17, 0x50, 0x59, 0x3a, 0xf3, 0x05,
	0xea, 0x89, 0x6c, 0x0c, 0x7e, 0x4b, 0xdd, 0xdf, 0x3b, 0xe2, 0x19, 0xd9, 0x28, 0x14, 0xc8, 0x9e,
	0x1c, 0x17, 0x27, 0xc2, 0x11, 0xdc, 0x36, 0xdc, 0x37, 0xc5, 0xff, 0x0b, 0xdd, 0x07, 0x68, 0xe7,
	0x32, 0xef, 0x70, 0x3f, 0xcb, 0xba, 0xff, 0x9a, 0x73, 0xbf, 0xe1, 0x79, 0xdb, 0xde, 0xb7, 0x02,
	0x1c, 0xed, 0x4a, 0xad, 0xe6, 0xd8, 0x7e, 0xfd, 0x30, 0x8c, 0x6f, 0xbb, 0x60, 0xe6, 0x98, 0xa5,
	0x88, 0xda, 0x23, 0xfb, 0x75, 0xec, 0xb8, 0x2f, 0x28, 0xb8, 0x4e, 0x57, 0xb1, 0xeb, 0x2c, 0x01,
	0xd4, 0x0c, 0xdb, 0xaf, 0xd7, 0x8c, 0x51, 0x96, 0x7c, 0xaf, 0x92, 0x99, 0x61, 0x96, 0x41, 0x55,
	0x96, 0xe9, 0x26, 0x4b, 0xbc, 0x6f, 0x22, 0x93, 0x65, 0x9a, 0x66, 0x31, 0xdb, 0x56, 0x17, 0xdb,
	0x59, 0xa6, 0xd9, 0x2c, 0xd5, 0x78, 0x53, 0x32, 0x68, 0xef, 0x7b, 0x01, 0xf6, 0x33, 0x37, 0x40,
	0x7a, 0xd0, 0x7c, 0xe0, 0x72, 0x5d, 0x93, 0x35, 0x34, 0xfd, 0x35, 0x17, 0x5b, 0x98, 0xee, 0x10,
	0x1d, 0xef, 0x8a, 0x2e, 0x24, 0x21, 0xe9, 0x30, 0x01, 0x54, 0xe5, 0x9f, 0x98, 0x2f, 0xd0, 0x84,
	0x4d, 0x77, 0xb0, 0x4a, 0x11, 0x72, 0x0a, 0x6d, 0xa5, 0x1e, 0xae, 0x05, 0xf2, 0x4c, 0x7b, 0x6d,
	0x96, 0x85, 0xd5, 0xfe, 0x68, 0xa7, 0x6d, 0xaa, 0x69, 0xb5, 0xb3, 0xca, 0xe1, 0xaa, 0xee, 0x11,
	0x1d, 0x85, 0x63, 0x46, 0x67, 0x0c, 0x39, 0x8f, 0xfb, 0x6d, 0xfa, 0x5b, 0x58, 0xef, 0x1c, 0xf6,
	0x6c, 0xe4, 0x11, 0x0d, 0x39, 0xaa, 0x17, 0xd1, 0xa5, 0x1e, 0xc6, 0xfd, 0xe9, 0xb3, 0x1a, 0x9b,
	0x80, 0xcf, 0xe2, 0x27, 0x51, 0x1d, 0x7b, 0x17, 0xea, 0xcd, 0x52, 0xc3, 0x7d, 0xeb, 0x73, 0x41,
	0xfe, 0x84, 0x8a, 0xcc, 0x1a, 0x70, 0x29, 0x52, 0x0b, 0xd0, 0xce, 0x2d, 0x80, 0x6d, 0xa2, 0x83,
	0x05, 0xb4, 0xee, 0x4c, 0x60, 0x82, 0x6c, 0xe9, 0xbb, 0x28, 0xa7, 0xaf, 0xcc, 0xe5, 0xb6, 0x93,
	0xbc, 0xa2, 0x7b, 0x90, 0x02, 0x49, 0x61, 0xbd, 0x5f, 0xc8, 0xbf, 0x50, 0x7f, 0x74, 0x84, 0xfb,
	0xac, 0x1e, 0x08, 0x72, 0x98, 0x93, 0xa8, 0x42, 0x76, 0xca, 0x86, 0x7f, 0x43, 0xd7, 0xa5, 0x41,
	0xff, 0x8b, 0xd7, 0x5f, 0x2f, 0xc2, 0x27, 0x27, 0xec, 0xcf, 0xf4, 0x87, 0x45, 0xd6, 0xf7, 0x04,
	0x1d, 0xd6, 0xe2, 0x92, 0xc6, 0x85, 0xc7, 0xaa, 0xfe, 0x9f, 0xb8, 0xf8, 0x11, 0x00, 0x00, 0xff,
	0xff, 0xcb, 0x3d, 0xd9, 0xb7, 0x38, 0x06, 0x00, 0x00,
}
